#include "modCipher.h"
#include <algorithm>
#include <cctype>
#include <stdexcept>
#include <vector>
#include <iostream> // Для вывода сообщений

class cipher_error : public std::runtime_error {
public:
    explicit cipher_error(const std::string& message) : std::runtime_error(message) {}
};

std::string prepareText(const std::string& text) {
    std::string prepared;
    for (char c : text) {
        if (isalpha(c)) {
            prepared += toupper(c);
        }
    }
    if (prepared.empty()) {
        throw cipher_error("Текст должен содержать хотя бы один алфавитный символ");
    }
    return prepared;
}

int getValidKey(int key, const std::string& text) {
    if (key <= 0 || key > static_cast<int>(text.length())) {
        throw cipher_error("Неверный ключ: " + std::to_string(key));
    }
    return key;
}

std::string coder(int key, const std::string& text) {
    std::cout << "Coder called with key: " << key << " and text: '" << text << "'" << std::endl;

    std::string preparedText = prepareText(text);
    
    std::cout << "Prepared text: '" << preparedText << "'" << std::endl;
    
    getValidKey(key, preparedText); // Проверяем ключ

    size_t len = preparedText.length();
    size_t rows = (len + key - 1) / key; // Количество строк

    std::vector<std::vector<char>> matrix(rows, std::vector<char>(key, '0'));

    size_t index = 0;
    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j < key; ++j) {
            if (index < len) {
                matrix[i][j] = preparedText[index++];
            }
        }
    }

    std::string coded;
    for (size_t j = 0; j < key; ++j) {
        for (size_t i = 0; i < rows; ++i) {
            if (matrix[i][j] != '0') {
                coded += matrix[i][j];
            }
        }
    }
    
    return coded;
}

std::string decoder(int key, const std::string& text) {
    std::cout << "Decoder called with key: " << key << " and text: '" << text << "'" << std::endl;

    std::string preparedText = prepareText(text);
    
    std::cout << "Prepared text: '" << preparedText << "'" << std::endl;
    
    getValidKey(key, preparedText); // Проверяем ключ

    size_t len = preparedText.length();
    size_t rows = (len + key - 1) / key; // Количество строк

    std::vector<std::vector<char>> matrix(rows, std::vector<char>(key, '0'));

    size_t index = 0;
    for (size_t j = 0; j < key; ++j) { // Запись в матрицу по столбцам
        for (size_t i = 0; i < rows; ++i) {
            if (index < len) {
                matrix[i][j] = preparedText[index++];
            }
        }
    }

    std::string decoded;
    for (size_t i = 0; i < rows; ++i) { // Чтение из матрицы по строкам
        for (size_t j = 0; j < key; ++j) {
            if (matrix[i][j] != '0') {
                decoded += matrix[i][j];
            }
        }
    }
    
    return decoded;
}
